generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String @unique
  name     String
  password String
  role     Int    @default(1)

  isActivated    Boolean @default(false)
  activationLink String? @unique @map("activation_link")
  restoreLink    String? @unique @map("restore_link")
  avatar         String?
  description    String?

  refreshSessions RefreshSession[]
}

model RefreshSession {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  refreshToken String @map("refresh_token")
  fingerPrint  String @map("finger_print")
  userId       String @map("user_id")
}

model Project {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  type         String?
  name         String    @unique
  archived     Boolean?
  previewImage String?   @map("preview_image")
  labels       String[]
  sections     Section[]
}

model Section {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  serial         Int
  name           String
  blocks         Block[]
  backgroundPath String?
  paddings       String?
  Project        Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId      String?
}

enum BlockTypes {
  h1
  p
  list
  img
}

model Block {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Section   Section? @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId String?

  serial   Int
  type     BlockTypes
  color    String
  text     String?
  items    String[]
  imgPath  String?
  imgDescr String?
}

model Article {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique
}

model News {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique
}
